// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/book_index.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookIndexClient is the client API for BookIndex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookIndexClient interface {
	// Sends a greeting
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (BookIndex_SearchClient, error)
}

type bookIndexClient struct {
	cc grpc.ClientConnInterface
}

func NewBookIndexClient(cc grpc.ClientConnInterface) BookIndexClient {
	return &bookIndexClient{cc}
}

func (c *bookIndexClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (BookIndex_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookIndex_ServiceDesc.Streams[0], "/BookIndex/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookIndexSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookIndex_SearchClient interface {
	Recv() (*SearchResult, error)
	grpc.ClientStream
}

type bookIndexSearchClient struct {
	grpc.ClientStream
}

func (x *bookIndexSearchClient) Recv() (*SearchResult, error) {
	m := new(SearchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookIndexServer is the server API for BookIndex service.
// All implementations must embed UnimplementedBookIndexServer
// for forward compatibility
type BookIndexServer interface {
	// Sends a greeting
	Search(*SearchRequest, BookIndex_SearchServer) error
	mustEmbedUnimplementedBookIndexServer()
}

// UnimplementedBookIndexServer must be embedded to have forward compatible implementations.
type UnimplementedBookIndexServer struct {
}

func (UnimplementedBookIndexServer) Search(*SearchRequest, BookIndex_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedBookIndexServer) mustEmbedUnimplementedBookIndexServer() {}

// UnsafeBookIndexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookIndexServer will
// result in compilation errors.
type UnsafeBookIndexServer interface {
	mustEmbedUnimplementedBookIndexServer()
}

func RegisterBookIndexServer(s grpc.ServiceRegistrar, srv BookIndexServer) {
	s.RegisterService(&BookIndex_ServiceDesc, srv)
}

func _BookIndex_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookIndexServer).Search(m, &bookIndexSearchServer{stream})
}

type BookIndex_SearchServer interface {
	Send(*SearchResult) error
	grpc.ServerStream
}

type bookIndexSearchServer struct {
	grpc.ServerStream
}

func (x *bookIndexSearchServer) Send(m *SearchResult) error {
	return x.ServerStream.SendMsg(m)
}

// BookIndex_ServiceDesc is the grpc.ServiceDesc for BookIndex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookIndex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookIndex",
	HandlerType: (*BookIndexServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _BookIndex_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/book_index.proto",
}
